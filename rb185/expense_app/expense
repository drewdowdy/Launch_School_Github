#! /usr/bin/env ruby

require "pg"
require "io/console"

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expenses_app")
  end

  def list_all_expenses
    sql = "SELECT * FROM expenses;"
    all_rows = @connection.exec(sql)
    display_items(all_rows)
  end

  def add_new_expense(amount, memo)
    sql = %q(
    INSERT INTO expenses (amount, memo)
    VALUES ($1, $2);
    )
    @connection.exec_params(sql, [amount, memo])

    puts 'Expenses have been updated.'
  end

  def search_expenses(term)
    sql = %q(
    SELECT * FROM expenses
    WHERE memo ILIKE $1;
    )

    matching_terms = @connection.exec_params(sql, ["%#{term}%"])

    display_items(matching_terms)
  end

  def delete_expense(id)
    select_sql = "SELECT * FROM expenses WHERE id = $1"
    removed_item = @connection.exec_params(select_sql, [id])
    
    if removed_item.ntuple == 1
      delete_sql = "DELETE FROM expenses WHERE id = $1;"
      @connection.exec_params(delete_sql, [id])
      puts "The following item has been removed:"
      display_items(removed_item)
    else
      puts "There is no item with id #{id}."
    end
  end

  def delete_all_expenses
    sql = "DELETE FROM expenses"
    @connection.exec(sql)
    
    puts 'All expenses have been deleted.'
  end

  private

  def display_items(result)
    result.each do |tuple|
      puts "#{tuple['id'].rjust(2)} | #{tuple['created_on']} | #{tuple['amount'].rjust(7)} | #{tuple['memo']}"
    end
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(arguments)
    command = arguments.shift

    case command
    when 'list'
      @application.list_all_expenses
    when 'add'
      amount = arguments[0]
      memo = arguments[1]
      abort 'You must provide an amount and memo.' unless amount && memo
      @application.add_new_expense(amount, memo)
    when 'search'
      @application.search_expenses(arguments[0])
    when 'delete'
      @application.delete_expense(arguments[0])
    when 'clear'
      puts 'This will remove all expenses. Are you sure? (y/n)'
      answer = $stdin.getch
      @application.delete_all_expenses if answer == 'y'
    else
      display_help
    end
  end

  def display_help
    puts <<~HINT
    An expense recording system

    Commands:

    add AMOUNT MEMO - record a new expense
    clear           - delete all expenses
    list            - list all expenses
    delete NUMBER   - remove expense with id NUMBER
    search QUERY    - list expenses with a matching memo field  
    HINT
  end
end

CLI.new.run(ARGV)

